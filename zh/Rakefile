# Get common recipes
recipes = ENV['CMSSW_BASE'] + '/src/FinalStateAnalysis/PlotTools/rake/recipes.rake'
import recipes

$jobid = ENV['jobid']

# Figure out what run period we are in
$period = '7TeV'
if $jobid.include? '8TeV'
  $period = '8TeV'
end

################################################################################
## Refreshing cython proxies ###################################################
################################################################################


################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end

#puts get_sample_names('data_DoubleMu')

samples = Hash[
  #"ewk" => Array['Zjets_M50', 'WplusJets_madgraph', 
    #'ZZJetsTo4L_pythia',
  #  'TTplusJets_madgraph'] + get_sample_names('WZ') + get_sample_names('WWJet') + get_sample_names('ZZ'),
  "ewk" => Array['Zjets_M50'] + get_sample_names('WZ') + get_sample_names('ZZ'),
  "wjets" => Array['WplusJets_madgraph'],
  "zjets" => Array['Zjets_M50'],
  "diboson" => get_sample_names('WZ') + get_sample_names('WWJet') + get_sample_names('ZZ'), #Array['ZZJetsTo4L_pythia'] + 
  "signal" => get_sample_names('VH') + get_sample_names('WH'),
  # Automagically figure out what data samples we have
  "data_mm" =>  get_sample_names("data_DoubleMu"),
  "data_ee" => get_sample_names("data_DoubleElectron"),
]

puts "diboson: " + samples["diboson"].inspect
# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end

################################################################################
## Recipes to measure fake rates 
##  targets:
##     fakerates - measure all fakerates
################################################################################

# Map which samples need to be analyzed by which analyzer
fr_analyzer_sample_map = Hash[
  "EFakeRateEEET.py"    => samples['data_ee'] + samples["diboson"] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"], # 
  "EFakeRateMMET.py"    => samples['data_mm'] + samples["diboson"] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"], # 
  "MUFakeRateEEMT.py"   => samples['data_ee'] + samples["diboson"] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"], # 
  "MUFakeRateMMMT.py"   => samples['data_mm'] + samples["diboson"] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"], # 
  "TauFakeRatesEETT.py" => samples["diboson"] + samples['data_ee'] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"],
  "TauFakeRatesMMTT.py" => samples["diboson"] + samples['data_mm'] + samples["zjets"] + samples["wjets"],# + Array["TTplusJets_madgraph"],
 ]

fr_analyzer_dependencies = Hash[
  "EFakeRateEEET.py"    => Array["EMUFakeRatesBase.py","baseSelections.py",],  # "EEETauTree.py",   ],
  "EFakeRateMMET.py"    => Array["EMUFakeRatesBase.py","baseSelections.py",],  # "MuMuETauTree.py", ],
  "MUFakeRateEEMT.py"   => Array["EMUFakeRatesBase.py","baseSelections.py",],  # "EEMuTauTree.py",  ],
  "MUFakeRateMMMT.py"   => Array["EMUFakeRatesBase.py","baseSelections.py",],  # "MuMuMuTauTree.py",],
  "TauFakeRatesEETT.py" => Array["TauFakeRatesBase.py","baseSelections.py",],  # "EETauTauTree.py",],
  "TauFakeRatesMMTT.py" => Array["TauFakeRatesBase.py","baseSelections.py",],  # "MuMuTauTauTree.py",],
]

# Create an empty placeholder to enable tab-completion
task :fakerates => []
# Create tasks for each sample + analyzer
#chec/ if base class or some selections has changed
fr_analyzer_dependencies.each do |analyzer, deps|
  file analyzer => fr_analyzer_dependencies[analyzer] do |t|
    #puts t.investigation
    sh "touch #{t.name}"
  end
end

fr_analyzer_sample_map.each do |analyzer, the_samples|
  puts "Creating tasks for analyzer: #{analyzer}"
  get_analyzer_results(analyzer, the_samples).each do |result|
    #file result => fr_analyzer_dependencies[analyzer]
    task :fakerates => result
  end
end

#puts :fakerates
# puts "\n\:fakerates.methods : ["+ :fakerates.methods.sort.join("  ").to_s+"]"
# puts :fakerates.public_methods

################################################################################
## Recipes to fit fake rates
##  targets:
##     fits
################################################################################

# Output directory
$frfit_dir = "results/#{$jobid}/fakerate_fits"
directory $frfit_dir

# Common fit functions
exponential = "scale*TMath::Exp(x*decay)+offset"
exponential_vars =  "scale[0.5, 0, 5],decay[-1e-2, -1, -1e-4],offset[1e-2, 0, 0.5]"

exponential2 = "scale*TMath::Exp(x*decay)"
exponential2_vars =  "scale[0.5, 0, 5],decay[-1e-2, -1, -1e-4]"

exp_rise = "scale*TMath::Exp(x*decay)"
exp_rise_vars =  "scale[-0.5, -5, 0],decay[-1e-2, -1, -1e-4]"

rise = "0.5*scale*(1+ TMath::Erf( (x - mu)/ sigma ) )+offset"
rise_vars = "scale[0.03, 1e-4, 1],mu[45, 20, 60],sigma[20, 10, 30],offset[0.006, 1e-5, 0.5]"

landau = "scale*TMath::Landau(x,mu,sigma,0)+offset"
landau_vars =  "scale[0.5, 0, 5],mu[5, 0, 100],sigma[1.9, 0.1, 20],offset[1e-2, 0, 0.5]"

flat = "offset"
flat_vars =  "offset[1e-2, 0, 0.5]"

# Fake rate fit configurations
fr_fits = Hash[
  # Format is type_region_denom_num_variable
  #
  # E/MU LOOSE ID PT
  #
  #"m_zlt_pt10_looseId_muonPt" => Hash[
  #  "samples" => Array["data_mm", "data_ee", "diboson"], #],#"ewk", 
  #  "analyzer" => "MUFakeRate??MT",
  #  "function" => flat,
  #  "variables" => flat_vars,
   # "corr"      => "--noCorrection true",
  #  "rebin" => 10,
  #  "range" => "10 100",
  #],
  #"e_zlt_pt10_looseId_electronPt" => Hash[
  #  "samples" => Array[ "data_mm", "data_ee", "diboson"], #],#"ewk",
  #  "analyzer" => "EFakeRate??ET",
  #  "function" => rise,
  #  "variables" => rise_vars,
  # # "corr"      => "--noCorrection true",
  #  "rebin" => 10,
  #  "range" => "10 100",
  #],
  #
  # E/MU TIGHT ID PT
  #
  #"m_zlt_pt10_tightId_muonPt" => Hash[
  #  "samples" => Array[ "data_mm", "data_ee", "diboson"], #],#"ewk",
  #  "analyzer" => "MUFakeRate??MT",
  #  "function" => flat,
  #  "variables" => flat_vars,
  # # "corr"      => "--noCorrection true",
  #  "rebin" => 10,
  #  "range" => "10 100",
  #],
  #"e_zlt_pt10_tightId_electronPt" => Hash[
  #  "samples" => Array[ "data_mm", "data_ee", "diboson"], #],#"ewk",
  #  "analyzer" => "EFakeRate??ET",
  #  "function" => rise,
  #  "variables" => rise_vars,
  # # "corr"      => "--noCorrection true",
  #  "rebin" => 10,
  #  "range" => "10 100",
  #],
  #
  # E/MU LOOSE ID JETPT
  #####
  "m_zlt_pt10_looseId_muonJetPt" => Hash[
    "samples" => Array["data_mm", "data_ee", "diboson"], #],#"ewk", 
    "analyzer" => "MUFakeRate??MT",
    "function" => rise,
    "variables" => rise_vars,
  ##  "corr"      => "--noCorrection true",
    "rebin" => 10,
    "range" => "10 60",
  ],
  "e_zlt_pt10_looseId_electronJetPt" => Hash[
    "samples" => Array["data_mm", "data_ee", "diboson"], #],#"ewk", 
    "analyzer" => "EFakeRate??ET",
    "function" => rise,
    "variables" => rise_vars,
    #"corr"      => "--noCorrection true",
    "rebin" => 10,
    "range" => "10 60",
  ],
  ##
  ## E/MU TIGHT ID JETPT
  ##
  "m_zlt_pt10_tightId_muonJetPt" => Hash[
    "samples" => Array["data_mm", "data_ee", "diboson"], #],#"ewk", 
    "analyzer" => "MUFakeRate??MT",
    "function" => rise,
    "variables" => rise_vars,
    #"corr"      => "--noCorrection true",
    "rebin" => 10,
    "range" => "10 60",
  ],
  "e_zlt_pt10_tightId_electronJetPt" => Hash[
    "samples" => Array["data_mm", "data_ee", "diboson"], #],#"ewk", 
    "analyzer" => "EFakeRate??ET",
    "function" => rise,
    "variables" => rise_vars,
    #"corr"      => "--noCorrection true",
    "rebin" => 10,
    "range" => "10 60",
  ],
  #
  # TAUS
  #
  #"t_ztt_pt10_MediumIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5, 
  #  "range" => "10 100",
  #],

  #"t_ztt_pt10_TightIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],

  #"t_ztt_pt10_LooseMVAIso_tauPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  #"t_ztt_pt10_LooseIso_tauPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  #"t_ztt_pt10_MediumMVAIso_tauPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  "t_ztt_pt10_LooseIso3Hits_tauPt" =>  Hash[
    "samples" => Array["diboson", "data_mm", "data_ee"],
    "analyzer" => "TauFakeRates??TT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
    "range" => "15 100",
  ],
  "t_ztt_pt10_LooseIso3Hits_tauJetPt" =>  Hash[
    "samples" => Array["diboson", "data_mm", "data_ee"],
    "analyzer" => "TauFakeRates??TT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
    "range" => "15 100",
  ],
  "t_ztt_pt10_MediumIso_tauJetPt" =>  Hash[
    "samples" => Array["diboson", "data_mm", "data_ee"],
    "analyzer" => "TauFakeRates??TT",
    "function" => exponential,
    "variables" => exponential_vars,
    "rebin" => 5,
    "range" => "15 100",
  ],
  #"t_ztt_pt10_TightMVAIso_tauPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  #"t_ztt_pt10_TightIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  # taus
  #"t_ztt_pt10-antiElMVATight-antiMuLoose_MediumIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],
  #"t_ztt_pt10-antiElMed-antiMuMed_TightIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #],  
  #"t_ztt_pt10-antiElLoose-antiMuTight_MediumIso_tauJetPt" =>  Hash[
  #  "samples" => Array["diboson", "data_mm", "data_ee"],
  #  "analyzer" => "TauFakeRates??TT",
  #  "function" => exponential,
  #  "variables" => exponential_vars,
  #  "rebin" => 5,
  #  "range" => "10 100",
  #]
 
  
]

# Placeholder
task :fits => []

# Create tasks for all the fr_fits
fr_fits.each do |fit, fit_info|
  fit_configuration = fit.split("_")
  region = fit_configuration[1]
  denom = fit_configuration[2]
  num = fit_configuration[3]
  var = fit_configuration[4]

  # Expand sample list
  subsample_inputs = []
  fit_info['samples'].each do |sample|
    #puts sample.inspect + ": " + samples[sample].inspect
    subsample_inputs += samples[sample]
  end

  fit_output = $frfit_dir + "/#{fit}.root"
  subsamples_inputs_result_list = subsample_inputs.map{|x|  "results/#{$jobid}/#{fit_info['analyzer']}/#{x}.root"}
  #puts "subsamples_inputs_result_list: " + subsamples_inputs_result_list.inspect
  mergedTargets = Array[]
  subsamples_inputs_result_list.each do |regexFile|
    target = regexFile.sub('??','Z')
    mergedTargets << target
    deps   = Dir.glob(regexFile)
    mergedir= File.dirname(target)
    file target => deps do |t|
      puts "merging #{regexFile} into #{target}"
      sh "mkdir -p #{mergedir}"
      sh "hadd -f #{target} #{regexFile}" 
    end
  end
  
  subsample_input_list = mergedTargets.join(" ")
  # 
  # # Path to histograms in root files
  denom_path = Array[region, denom, var].join("/")
  num_path = Array[region, denom, num, var].join("/")
  
  # Correct the numerator and denominator for WZ + ZZ contamination -- ASK EVAN IF IT IS CORRECT
  # The output is stored in "numerator" and "denominator"
  corrected_file = fit_output.sub('.root', '.corrected_inputs.root')
  file corrected_file => mergedTargets + Dir.glob(fit_info['analyzer'] + '.py') + ["CorrectFakeRateData.py"] do |t|
    sh "mkdir -p #{$frfit_dir}"
    # debugging
    #puts "python CorrectFakeRateData.py --files #{subsample_input_list} --lumifiles inputs/#{$jobid}/*sum --outputfile #{t.name} --numerator '#{num_path}' --denom '#{denom_path}' --rebin #{fit_info['rebin']} #{fit_info['corr']}"
    sh "python CorrectFakeRateData.py --files #{subsample_input_list} --lumifiles inputs/#{$jobid}/*sum --outputfile #{t.name} --numerator '#{num_path}' --denom '#{denom_path}' --rebin #{fit_info['rebin']} #{fit_info['corr']}"
  end
  
  # puts fit_output
  # puts corrected_file
  file fit_output => [corrected_file, ENV['CMSSW_BASE'] + '/src/FinalStateAnalysis/StatTools/scripts/fit_efficiency_chi2.py'] do |t| # ] do |t| #
    sh "fit_efficiency_chi2.py #{fit_output} numerator denominator \'#{fit_info['function']}\' \'#{fit_info['variables']}\' #{corrected_file} --plot --xrange #{fit_info['range']} --xtitle #{var} --grid"
  end
  task :fits => fit_output #corrected_file

end

################################################################################
## Recipes to analyze ZH
##  targets:
##     mmt
################################################################################

analyzer_dependencies = Hash[
  "ZHAnalyzeMMMT.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeEEMT.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeMMET.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeEEET.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeMMEM.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeEEEM.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeMMTT.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
  "ZHAnalyzeEETT.py" => Array["baseSelections.py", "mcCorrectors.py", "ZHAnalyzerBase.py", "fake_rate_functions.py"],
]

#check if base class or some selections has changed
analyzer_dependencies.each do |analyzer, deps|
  #puts analyzer
  #puts deps.inspect
  file analyzer => deps do |t|
    #puts t.investigation
    sh "touch #{t.name}"
  end
end

task :mmmt_signal_only => get_analyzer_results("ZHAnalyzeMMMT", samples['signal'])
task :eemt_signal_only => get_analyzer_results("ZHAnalyzeEEMT", samples['signal'])
task :mmet_signal_only => get_analyzer_results("ZHAnalyzeMMET", samples['signal'])
task :eeet_signal_only => get_analyzer_results("ZHAnalyzeEEET", samples['signal'])
task :mmem_signal_only => get_analyzer_results("ZHAnalyzeMMEM", samples['signal'])
task :eeem_signal_only => get_analyzer_results("ZHAnalyzeEEEM", samples['signal'])
task :mmtt_signal_only => get_analyzer_results("ZHAnalyzeMMTT", samples['signal'])
task :eett_signal_only => get_analyzer_results("ZHAnalyzeEETT", samples['signal'])

task :mmmt => get_analyzer_results("ZHAnalyzeMMMT.py", samples['ewk'] + samples['data_mm'] + samples['signal'])
task :eemt => get_analyzer_results("ZHAnalyzeEEMT.py", samples['ewk'] + samples['data_ee'] + samples['signal'])
task :mmet => get_analyzer_results("ZHAnalyzeMMET.py", samples['ewk'] + samples['data_mm'] + samples['signal'])
task :eeet => get_analyzer_results("ZHAnalyzeEEET.py", samples['ewk'] + samples['data_ee'] + samples['signal'])
          
task :mmem => get_analyzer_results("ZHAnalyzeMMEM.py", samples['ewk'] + samples['data_mm'] + samples['signal'])
task :eeem => get_analyzer_results("ZHAnalyzeEEEM.py", samples['ewk'] + samples['data_ee'] + samples['signal'])
task :mmtt => get_analyzer_results("ZHAnalyzeMMTT.py", samples['ewk'] + samples['data_mm'] + samples['signal'])
task :eett => get_analyzer_results("ZHAnalyzeEETT.py", samples['ewk'] + samples['data_ee'] + samples['signal'])

task :data_only_mmmt => get_analyzer_results("ZHAnalyzeMMMT.py", samples['data_mm'])
task :data_only_eemt => get_analyzer_results("ZHAnalyzeEEMT.py", samples['data_ee'])
task :data_only_mmet => get_analyzer_results("ZHAnalyzeMMET.py", samples['data_mm'])
task :data_only_eeet => get_analyzer_results("ZHAnalyzeEEET.py", samples['data_ee'])
      
task :data_only_mmem => get_analyzer_results("ZHAnalyzeMMEM.py", samples['data_mm'])
task :data_only_eeem => get_analyzer_results("ZHAnalyzeEEEM.py", samples['data_ee'])
task :data_only_mmtt => get_analyzer_results("ZHAnalyzeMMTT.py", samples['data_mm'])
task :data_only_eett => get_analyzer_results("ZHAnalyzeEETT.py", samples['data_ee'])

task :abdollah_sync_mmmt => ["results/#{$jobid}/ZHAnalyzeMMMT/ZH_AbdollahSync.root"]
task :abdollah_sync_eemt => ["results/#{$jobid}/ZHAnalyzeEEMT/ZH_AbdollahSync.root"]
task :abdollah_sync_mmet => ["results/#{$jobid}/ZHAnalyzeMMET/ZH_AbdollahSync.root"]
task :abdollah_sync_eeet => ["results/#{$jobid}/ZHAnalyzeEEET/ZH_AbdollahSync.root"]

task :abdollah_sync_mmem => ["results/#{$jobid}/ZHAnalyzeMMEM/ZH_AbdollahSync.root"]
task :abdollah_sync_eeem => ["results/#{$jobid}/ZHAnalyzeEEEM/ZH_AbdollahSync.root"]
task :abdollah_sync_mmtt => ["results/#{$jobid}/ZHAnalyzeMMTT/ZH_AbdollahSync.root"]
task :abdollah_sync_eett => ["results/#{$jobid}/ZHAnalyzeEETT/ZH_AbdollahSync.root"]


#A Task to dominate all...
task :analyzezh => [:mmmt, :eemt, :mmet, :eeet, :mmem, :eeem, :mmtt, :eett] do
#task :analyzezh => [:mmmt, :eemt, :eeet, :eeem, :mmtt, :eett] do
#task :analyzezh => [:eeem, :mmtt, :eett] do
  puts "called analyzezh task from local rakefile"
end

task :analyzezh_data => [ :data_only_mmmt, :data_only_eemt, :data_only_mmet, :data_only_eeet, :data_only_mmem, :data_only_eeem, :data_only_mmtt, :data_only_eett] do
  puts "called analyzezh_data task from local rakefile"
end

task :abdollah_sync => [:abdollah_sync_mmmt, :abdollah_sync_eemt, :abdollah_sync_mmet, :abdollah_sync_eeet,  :abdollah_sync_mmem, :abdollah_sync_eeem,  :abdollah_sync_mmtt, :abdollah_sync_eett] do
end

task :analyzezh_signal => [:mmmt_signal_only, :eemt_signal_only, :mmet_signal_only, :eeet_signal_only, :mmem_signal_only, :eeem_signal_only, :mmtt_signal_only, :eett_signal_only] do
  puts "called analyzezh_signal task from local rakefile"
end

################################################################################
# Recipes to make data cards (plots come for free)
#  targets:
#      mmt_shapes
#      emt_shapes
#      eet_shapes
#      cards
#      copycards -> move cards to official HTT CVS area
################################################################################


# Output directories
channels = [ "mmmt", "eemt", "mmet", "eeet", "mmem", "eeem", "mmtt", "eett"]
chToRun  = ["python","ZHPlotterBase.py"]
outFiles = Array.new
channels.each do |channel|
  $plotdir = "results/#{$jobid}/plots/#{channel}/"
  directory $plotdir
  outf = "#{$plotdir}/#{channel}_shapes_#{$period}.root"
  outFiles << outf
  # puts "results/#{$jobid}/ZHAnalyze#{channel.upcase}/*" + '.root'
  # puts Dir.glob("results/#{$jobid}/ZHAnalyze#{channel.upcase}/*" + '.root').inspect
  file outf => ['ZHPlotterBase.py'] + Dir.glob("results/#{$jobid}/ZHAnalyze#{channel.upcase}/*" + '.root') do |t|
    chToRun << channel.upcase 
  end
end

task :plots => outFiles do |t|
  sh chToRun.join(" ")
end

# # Recipes for adding stat. error shapes.  Makes a new file task:
# # input_file_stat_errors.root => input_file.root
# def add_fake_errors(input_file, prefix)
#   output_file = input_file.sub('.root', '_statshapes.root')
#   output_sys_list = input_file.sub('.root', '_statshapes.txt')
#   file output_file => [input_file] do |t|
#     sh "$CMSSW_BASE/src/HiggsAnalysis/HiggsToTauTau/scripts/add_stat_shapes.py #{input_file} #{output_file} --filter '*fakes' --prefix CMS_vhtt_#{$period}_#{prefix}_fakeshape > #{output_sys_list}"
#   end
# end
# 
# The .root files with the shapes
# add_fake_errors("#{$mmtdir}/mmt_shapes_#{$period}.root", "mmt")
# task :mmt_shapes => ["#{$mmtdir}/mmt_shapes_#{$period}_statshapes.root" ]



$carddir = "results/#{$jobid}/cards"
# 
# Combine all category shape files into the datacard project
file "#{$carddir}/shapes_unmorphed.root" => Dir.glob("results/#{$jobid}/plots/????/????_shapes_#{$period}.root") do |t|
  sh "mkdir -p #{$carddir}"
  sh "hadd -f #{t.name} #{t.prerequisites.join(' ')}"
end

# Masses where actually have signal samples
pivot_masses = []
Dir.glob("inputs/#{$jobid}/VH_H2Tau_M-???.meta.json").each do |name|
  pivot_masses << name.split("/")[-1].split('-')[-1].split('.')[0]
end

# Now do the horizontal morphing
file "#{$carddir}/shapes.root" => ["#{$carddir}/shapes_unmorphed.root"] do |t|
  puts "Doing horizontal morphing"
  sh "cp #{t.prerequisites[0]} #{t.name}"
  sh "horizontal-morphing.py --categories='#{channels.join('_zh,')}_zh' --samples='ZH_htt{MASS},ZH_hww{MASS}' --uncerts='' --masses='#{pivot_masses.join(',')}' --step-size=1 -i #{t.name}" #FIXME ,ZH_hww{MASS}
end

stat_shape_lists = [] #Dir.glob("results/#{$jobid}/plots/*/*_statshapes.txt")
# # We make these the dependency, since they are always rpoduced w/ the .txt lists
# stat_shapes = Dir.glob("results/#{$jobid}/plots/*/*_statshapes.root")

# We need to build the unc.conf and unc.vals with our stat shapes
file "#{$carddir}/unc.conf" => ["unc.conf.template", "#{$carddir}/shapes.root"] + stat_shape_lists do |t|
  # Copy the basic template
  sh "cp unc.conf.template #{t.name}"
  # Append all the stat shape types
  sh "echo '' >> #{t.name}"
  sh "echo '# Stat shape uncertainties' >> #{t.name}"
  # NOT IMPLEMENTED YET
  # stat_shape_lists.each do |list|
  #   sh "cat #{list} | xargs -n 1 -I {} echo '{} shape' >> #{t.name}"
  # end
end

file "#{$carddir}/unc.vals" => ["unc.vals.template", "#{$carddir}/shapes.root"] + stat_shape_lists do |t|
  # Copy the basic template
  #puts t.investigation
  sh "cp #{t.prerequisites[0]} #{t.name}"
  #NOT IMPLEMENTED YET
  # Append all the stat shape types
  # sh "echo '' >> #{t.name}"
  # sh "echo '# Stat shape uncertainties' >> #{t.name}"
  # stat_shape_lists.each do |list| 
  #   sh "cat #{list} | grep mmt | xargs -n 1 -I {} echo 'mmt fakes {} 1.0' >> #{t.name}"
  #   sh "cat #{list} | grep emt | xargs -n 1 -I {} echo 'emt fakes {} 1.0' >> #{t.name}"
  # end
end

file "#{$carddir}/cgs.conf" => "cgs.conf.template" do |t|
  sh "cp #{t.prerequisites[0]} #{t.name}"
end

def make_datacard_task(mass, channel, categories)
  card = "#{$carddir}/#{mass}/vhtt_#{channel}.txt"  
  file card => ["#{$carddir}/shapes.root", "#{$carddir}/unc.conf", "#{$carddir}/unc.vals", "#{$carddir}/cgs.conf"] do |t|
    chdir($carddir) do
      sh "mkdir -p #{channel}/#{mass}"
      # Link the shape file in the card directory so combine can run from anywhere
      chdir("#{channel}/#{mass}") do
        sh "rm -f shapes.root"
        sh "ln -s ../../shapes.root"
      end
      if categories == ''
        sh "create-datacard.py -i shapes.root -o #{channel}/#{mass}/vhtt_#{channel}.txt #{mass}"
      else
        sh "create-datacard.py -i shapes.root -o #{channel}/#{mass}/vhtt_#{channel}.txt #{mass} --categories '#{categories}'"
      end
    end
  end
  return card
end

task :cards => []

cardmasses = Array[110, 115, 120, 125, 130, 135, 140]

cardmasses.each do |mass|
  task :cards => make_datacard_task(mass, '4l', '')
  channels.each do |channel|
      task :cards => make_datacard_task(mass, channel, channel+'_zh')
  end
end

################################################################################
### Computing the limits                         ###############################
################################################################################

$limitdir=$carddir

limitFiles = Array[]
tagetsByChannel = Hash[]
(['4l'] + channels).each do |channel|
  cardmasses.each do |mass|  
    target="#{$limitdir}/#{channel}/#{mass}/higgsCombineTest-exp.Asymptotic.mH#{mass}.root"
    limitFiles << target
    if tagetsByChannel.has_key?("channel")
      tagetsByChannel[channel] << target
    else
      tagetsByChannel[channel] = [target]
    end
    file target => ["#{$carddir}/#{mass}/vhtt_#{channel}.txt"] do |t|
      sh "mkdir -p #{$limitdir}/#{channel}"
      chdir("#{$limitdir}/#{channel}") do
        sh "limit.py --asymptotic #{mass}"
      end
    end
  end
end
task :limits => limitFiles

################################################################################
### making the brazil plots                         ############################
################################################################################
plotfiles = Array[]
(['4l'] + channels).each do |channel|
  target="#{$limitdir}/#{channel}/#{channel}_limit.root"
  plotfiles << target
  file target => tagetsByChannel[channel] do |t|
    chdir("#{$limitdir}") do
      sh "plot asymptotic #{ENV['CMSSW_BASE']}/src/HiggsAnalysis/HiggsToTauTau/python/layouts/sm_vhtt_layout.py #{channel}"
      sh "mv limits_limit.root #{channel}/#{channel}_limit.root"
      sh "mv #{channel}_limit.* #{channel}/."
    end
  end
end
task :limitplots => plotfiles

# ################################################################################
# ### Copying card configuration to official place ###############################
# ################################################################################
# 
# #$httcombodir="#{ENV['CMSSW_BASE']}/src/HiggsAnalysis/HiggsToTauTau/setup/vhtt"
# $httcombodir="/afs/hep.wisc.edu/cms/efriis/Limits2/src/HiggsAnalysis/HiggsToTauTau/setup/vhtt"
# 
# file "#{$httcombodir}/cgs-sm-#{$period}-00.conf" => ["#{$carddir}/cgs.conf"] do |t|
#     puts t.investigation
#   sh "cp -v #{t.prerequisites[0]} #{t.name}"
# end
# 
# file "#{$httcombodir}/unc-sm-#{$period}-00.conf" => ["#{$carddir}/unc.conf"] do |t|
#   sh "cp -v #{t.prerequisites[0]} #{t.name}"
# end
# 
# file "#{$httcombodir}/unc-sm-#{$period}-00.vals" => ["#{$carddir}/unc.vals"] do |t|
#   sh "cp -v #{t.prerequisites[0]} #{t.name}"
# end
# 
# file "#{$httcombodir}/vhtt_llt.inputs-sm-#{$period}.root" => ["#{$carddir}/shapes.root"] do |t|
#   sh "cp -v #{t.prerequisites[0]} #{t.name}"
# end
# 
# task :copycards => [
#   "#{$httcombodir}/cgs-sm-#{$period}-00.conf",
#   "#{$httcombodir}/unc-sm-#{$period}-00.conf",
#   "#{$httcombodir}/unc-sm-#{$period}-00.vals",
#   "#{$httcombodir}/vhtt_llt.inputs-sm-#{$period}.root"]  do |t|
#     puts t.investigation
#   end
